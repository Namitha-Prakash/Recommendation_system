# -*- coding: utf-8 -*-
"""FINAL_PROJECT_MOVIE_RECCOMENDOR_SYSTEMS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17vwrwSZSbNQ2POIKEsXnaNO7w2bFQz0k

# ***PROJECT TOPIC***
Movie Recommendation System

**Project Objective**

Recommendation systems are algorithms that suggest products, services, or content to users based on their preferences, behavior, and other factors. These systems are widely used in various domains.

***Types of Recommendation Systems ***

**1.Collaborative Filtering:**

a.User-Based Collaborative Filtering:

This method recommends items to a user based on the preferences of similar users. For example, if User A and User B have similar tastes, the system will recommend items that User B likes to User A.

b.Item-Based Collaborative Filtering:

This method recommends items based on their similarity to items that the user has liked in the past. If a user has liked Item X, and Item Y is similar to Item X, the system will recommend Item Y.

**2.Content-Based Filtering:**

This approach recommends items based on the content or attributes of the items and the user's preferences. For example, if a user likes action movies, the system will recommend other action movies by analyzing the genre, actors, and other features.

Recommendation systems play a crucial role in improving user experience and engagement by providing personalized suggestions. The choice of the type of recommendation system depends on the domain, available data, and specific use case. By leveraging these systems, businesses can enhance user satisfaction, drive sales, and build long-term customer loyalty.

**Data Source**:

GitHub: YBI-Foundation/Dataset

**Import Library**
"""

import pandas as pd

"""**Import Data**"""

df = pd.read_csv("https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv")

df.head()

df.describe()

df.info()

df.shape

df.columns

"""**Feature Selection**"""

features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

features.shape

x = features['Movie_Genre'] + ' ' + features['Movie_Keywords'] + ' ' + features['Movie_Tagline'] + ' ' + features['Movie_Cast'] + ' ' + features['Movie_Director']

x.shape

"""**Convert feature text to tokens**

"""

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

print(x.shape)
print(x)

"""**Get Similarity Score with Cosine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity
Similarity_Score = cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

"""**Get Movie name as Input And Validate For closest Spelling**"""

Fav_movie = input("Please Enter Your Favourite Movie:")

All_Movies = df['Movie_Title'].tolist()

import difflib

Movie_reccomendation = difflib.get_close_matches(Fav_movie,df['Movie_Title'])
print(Movie_reccomendation)

Close_match = Movie_reccomendation[0]
print(Close_match)

Index_Of_Movie = df[df.Movie_Title == Close_match]['Movie_ID'].values[0]
print(Index_Of_Movie)

#a list of similar words
Recommendation_score = list(enumerate(Similarity_Score[Index_Of_Movie]))
print(Recommendation_score)

"""**Sort all Movies According to Recommendation score with Respect to Favourite Movie**"""

Sort = sorted(Recommendation_score,key = lambda x:x[1],reverse = True)
print(Sort)

print("Top 10 Movies Recommended For You:")
i=1
for movie in Sort:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if (i<11):
    print(i,'.',title_from_index)
    i+=1

"""***Recommend Top 5 similar movies***"""

Movie_name = input("Enter your favourite movie name : ")

list_of_all_titles = df['Movie_Title'].tolist()

close_match = difflib.get_close_matches(Movie_name, list_of_all_titles)

Match = close_match[0]

Index_of_Movie = df[df.Movie_Title == Match]['Movie_ID'].values[0]

Recommendation_score = list(enumerate(Similarity_Score[Index_Of_Movie]))

sorted_similar_movies = sorted(Recommendation_score, key = lambda x:x[1], reverse = True)

print('Top 5 similar movies to '+Movie_name+' are:\n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
  if (i<6):
    print(i,'.',title_from_index)
    i+=1

import difflib


Movie_name = input("Enter your favourite movie name: ")

list_of_all_titles = df['Movie_Title'].tolist()

close_match = difflib.get_close_matches(Movie_name, list_of_all_titles)


if not close_match:
    print("No close match found. Please try again with a different movie name.")
else:
    Match = close_match[0]

    Index_of_Movie = df[df.Movie_Title == Match]['Movie_ID'].values[0]

    Recommendation_score = list(enumerate(Similarity_Score[Index_of_Movie]))


    sorted_similar_movies = sorted(Recommendation_score, key=lambda x: x[1], reverse=True)


    print('Top 5 similar movies to ' + Movie_name + ' are:\n')

    i = 1
    for movie in sorted_similar_movies:
        index = movie[0]
        title_from_index = df[df.Movie_ID == index]['Movie_Title'].values
        if i < 6:
            print(i, '.', title_from_index[0])
            i += 1


import streamlit as st
import pandas as pd
import difflib
import requests

# Load your data
df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv')  # Replace with your dataset path

# Function to fetch movie poster using OMDb API
def fetch_poster(movie_title):
    api_key = 'http://www.omdbapi.com/?i=tt3896198&apikey=81084a4'  # Replace with your OMDb API key
    url = f"http://www.omdbapi.com/?t={movie_title}&apikey={api_key}"
    data = requests.get(url).json()
    if 'Poster' in data and data['Poster'] != "N/A":
        return data['Poster']
    else:
        return "https://via.placeholder.com/300x450?text=No+Image"

# Function to recommend movies
def recommend_movies(Movie_name):
    list_of_all_titles = df['Movie_Title'].tolist()
    close_match = difflib.get_close_matches(Movie_name, list_of_all_titles)

    if not close_match:
        return [], []

    Match = close_match[0]
    Index_of_Movie = df[df.Movie_Title == Match]['Movie_ID'].values[0]
    Recommendation_score = list(enumerate(Similarity_Score[Index_of_Movie]))
    sorted_similar_movies = sorted(Recommendation_score, key=lambda x: x[1], reverse=True)

    recommended_movies = []
    recommended_posters = []

    for movie in sorted_similar_movies[1:6]:
        index = movie[0]
        title_from_index = df[df.Movie_ID == index]['Movie_Title'].values[0]
        recommended_movies.append(title_from_index)
        recommended_posters.append(fetch_poster(title_from_index))

    return recommended_movies, recommended_posters

# Streamlit UI setup
st.title('Movie Recommendation System')

# Input from user
Movie_name = st.text_input('Enter your favourite movie name:')

if st.button('Recommend'):
    if Movie_name:
        recommended_movies, recommended_posters = recommend_movies(Movie_name)
        if recommended_movies:
            st.subheader('Top 5 similar movies to ' + Movie_name + ' are:')
            for i in range(len(recommended_movies)):
                st.image(recommended_posters[i], caption=recommended_movies[i])
        else:
            st.write("No similar movies found!")
    else:
        st.write("Please enter a movie name.")

